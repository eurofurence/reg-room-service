openapi: 3.0.3
info:
  title: Room Service
  description: |-
    This backend microservice manages 
    - room groups formed by registered attendees
    - rooms
    - room assignments of room groups or individual attendees
    - a countdown to reveal a secret for external room booking
    
    USE CASE 1: youth hostel style convention
    
    Room groups are useful if you run your convention in a youth hostel, where the registration
    fee includes a bed in one of the rooms. Because each bed costs the same and is included in the convention fee, 
    Attendees can form groups of their own choice, and a few days before the convention, an admin makes the room assignments.
    
    In this model, attendees form room groups after they are approved. Each reg includes a bed anyway, so the only thing
    being managed is who goes in which room.

    USE CASE 2: hotel room lottery
    
    Rooms can also be used in standalone fashion, only assigning individual attendees. This is
    particularly useful if you run your convention in a hotel, and you want to run a room lottery, where
    you are re-selling a fixed set of rooms of different types. 
    
    In this model, the cost of accommodation is not included 
    with the convention fee, but instead the room types are separate packages. In order to conduct the
    lottery, registrations that have selected the same room package need to refer to each other (which is an implicit
    way of forming a room group that is not managed by this service). When a room is reserved for them, their
    registration is approved and the room fee is billed along with the registration fee, and they are assigned
    to the room.

    Note that unlike the youth hostel model, the room assignment happens before the attendees in it are approved,
    so the hotel room is reserved before you bill the attendees for their share of the room price.

    USE CASE 3: countdown to reveal a secret for booking with a third party
    
    There is also a countdown function that allows opening external room reservations at a certain time,
    which can reveal a secret code at that time. This is useful if room reservations are actually
    managed by a hotel or other third party, which collects the cost directly, and you are not involved in the
    transaction.

    In this model, all attendees get access to the secret code at the same time 
    and can then attempt a reservation in a system run by the third party, or via email or phone, using the secret code.
    
    Note that in this model, room booking is not really tied to a valid registration, you'll need to check the list from
    the third party to find out if someone booked who was then cancelled, for example.
  license:
    name: MIT
    url: https://github.com/eurofurence/reg-room-service/blob/main/LICENSE
  version: 0.1.0
servers:
  - url: /api/rest/v1
    description: localhost
  - url: /roomsrv/api/rest/v1
    description: server
tags:
  - name: groups
    description: Manage Room Groups
  - name: rooms
    description: Manage Rooms
  - name: countdown
    description: Countdown to secret reveal
paths:
  /groups:
    get:
      tags:
        - groups
      summary: list groups
      description: |-
        Obtain a list of all groups, including their members.       
        
        Admin or Api Key authorization only.
      operationId: listGroups
      parameters:
        - name: member_ids
          in: query
          description: a comma separated list of badge numbers. The result will be limited to all groups that contain at least one of these badge numbers as members.
          schema:
            type: string
            example: 4,11,2560
        - name: min_size
          in: query
          description: list only groups that currently have at least this many members (optional, defaults to 0 which means no limitation)
          schema:
            type: integer
            example: 2
        - name: max_size
          in: query
          description: list only groups that currently have at most this many members (optional, defaults to 0 which means no limitation)
          schema:
            type: integer
            example: 4
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupList'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see the list of groups (admin/api key only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
    post:
      tags:
        - groups
      summary: create a new group
      description: |-
        Create a new room group, setting yourself as the owner.
        
        This also adds you as the first member of the room group.
        
        You must have a valid registration.
      operationId: createGroup
      requestBody:
        description: Create a new room group
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        '201':
          description: Successfully created
          headers:
            Location:
              schema:
                type: string
              description: URL of the created resource, ending in the assigned uuid.
        '400':
          description: Invalid input (name too long/missing, etc.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to create a room group (maybe not registered?)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: duplicate (same group name, or you already are in a room group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
  /groups/my:
    get:
      tags:
        - groups
      summary: find my group
      description: |-
        Obtain the group you are in. Must have a valid registration.
        
        This works even for admins.
        
        Because the user identity is taken from the logged in user, this does not work for Api Key authorization.
        Use the /groups endpoint with member_id parameter instead.
      operationId: findMyGroup
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see the list of groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: You are not in any groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
  /groups/{uuid}:
    get:
      tags:
        - groups
      summary: obtain a group by uuid
      description: Returns a single group
      operationId: getGroupById
      parameters:
        - name: uuid
          in: path
          description: uuid of the group to return
          required: true
          schema:
            type: string
            example: 604f5ea8-d146-4aac-9a15-4dc33a84eb59
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see this group (e.g. not a member)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
    put:
      tags:
        - groups
      summary: Update an existing group
      description: |-
        Update an existing group by uuid. Note that you cannot use this to change the group members!
        
        Admins or the current group owner can change the group owner to any member of the group.
      operationId: updateGroup
      parameters:
        - name: uuid
          in: path
          description: uuid of the group to update
          required: true
          schema:
            type: string
            example: 604f5ea8-d146-4aac-9a15-4dc33a84eb59
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        '200':
          description: Successful operation
          headers:
            Location:
              schema:
                type: string
              description: URL of the resource, ending in the assigned uuid.
        '400':
          description: Invalid uuid supplied or invalid data in request body, or new owner not part of the group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to change this group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: your changes would turn this group into a duplicate (same name as existing other group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
  /groups/{uuid}/members/{badgenumber}:
    post:
      tags:
        - groups
      summary: add or invite a group member
      description: |-
        Adds an attendee to a group.
        
        Group owners may use this to send an invite email. The invite email will contain a link with a code which
        then allows the invited person to add themselves.
        
        Admins can add the force query parameter to just add. If they do not specify force=true, they are subject
        to the same limitations as every normal user.
        
        Users may only add themselves, and only if they have a valid invite code.
      operationId: addToGroup
      parameters:
        - name: uuid
          in: path
          description: uuid of the group
          required: true
          schema:
            type: string
            example: 604f5ea8-d146-4aac-9a15-4dc33a84eb59
        - name: badgenumber
          in: path
          description: badge number of the attendee
          required: true
          schema:
            type: integer
            example: 4
        - name: nickname
          in: query
          description: authorize sending an invitation email by proving you know the person's nickname (used for two-step invitation process)
          schema:
            type: string
            example: JumpySquirrel
        - name: code
          in: query
          description: invitation code (used for two-step invitation process)
          schema:
            type: string
            example: 80a4c699
        - name: force
          in: query
          description: directly perform add, do not send invite to user (admin only)
          schema:
            type: string
            default: false
            enum:
              - false
              - true
      responses:
        '204':
          description: successful operation
        '400':
          description: Invalid group id or badge number supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to do this
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee or group not found, or nickname mismatch for sending invitation mails, or authorization code mismatch for joining a group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Duplicate assignment, this attendee is already in another group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
    delete:
      tags:
        - groups
      summary: remove a group member or revoke an invitation
      description: |-
        Removes the attendee with the given badge number from the group (or its list of invitations).
        
        Group owners can remove members/revoke invitations.
        
        Members can remove themselves/decline invitations.
        
        Admins can remove anyone/revoke their invitations.
        
        If a member is the current group owner, this fails with 409 conflict. First must reassign the group owner via an update to the group resource.
      operationId: removeFromGroup
      parameters:
        - name: uuid
          in: path
          description: uuid of the group
          required: true
          schema:
            type: string
            example: 604f5ea8-d146-4aac-9a15-4dc33a84eb59
        - name: badgenumber
          in: path
          description: badge number of the attendee
          required: true
          schema:
            type: integer
            example: 4
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid group id or badge number supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to do this
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee or group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict, this attendee is currently the owner of the group. Either change the owner first, or disband (delete) the group completely.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
  /countdown:
    get:
      tags:
        - countdown
      summary: external room booking launch information
      description: |-
        Returns the countdown information. If the countdown has reached 0, also reveals the configured secret.
        
        You need to be logged in.
      operationId: countdown
      parameters:
        - name: currentTimeIso
          in: query
          description: Testing override for the current time. Used in end to end tests for the frontend. Not useful in production because you will also not get the real secret.
          schema:
            type: string
            format: date-time
            example: 2006-01-02T15:04:05-07:00
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Countdown'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
components:
  schemas:
    Countdown:
      type: object
      required:
        - currentTime
        - targetTime
        - countdown
      properties:
        currentTime:
          type: string
          format: date-time
          description: The current time on the server
          example: 2006-01-02T15:04:05+07:00
        targetTime:
          type: string
          format: date-time
          description: The time at which the countdown ends (may depend on authorization, e.g. staff may register earlier than normal users)
          example: 2006-01-02T15:04:05+07:00
        countdown:
          type: integer
          format: int64
          description: The number of seconds until the countdown ends (may depend on authorization, e.g. staff may register earlier than normal users). Stays at 0 if the countdown is over.
          example: 12648
        secret:
          type: string
          description: The secret code word you'll need to give the hotel (may depend on authorization, e.g. staff gets a different code word that allows earlier room booking). Will be missing before your countdown has reached 0.
    GroupList:
      type: object
      required:
        - groups
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
    Group:
      type: object
      required:
        - name
        - owner
      properties:
        id:
          type: string
          description: The internal primary key of the group, in the form of a UUID. Only set when reading groups, completely ignored when you send a group to us.
          example: 604f5ea8-d146-4aac-9a15-4dc33a84eb59
        name:
          type: string
          description: The name of the room group, must be unique, but otherwise just used for display purposes
          example: Kittens
          maxLength: 80
          minLength: 1
        flags:
          type: string
          description: A comma separated list of flags as declared in configuration. Flags are used to store yes/no-style information about the group such as "privacy requested", etc.
          example: privacy,wheelchair
        comments:
          type: string
          description: Optional comments the owner wishes to make regarding the room group. Not processed in any way.
          example: A personal reason for the privacy request
        maximum_size:
          type: integer
          minimum: 0
          description: if set higher than 0 (the default), will limit the number of people that can join the group. Note that there is also a configuration item that globally limits the size of groups, e.g. to the maximum room size.
          example: 6
        owner:
          type: integer
          description: the badge number of the group owner. Must be a member of the group. If you are not an admin, you can only create groups with yourself as owner.
        members:
          type: array
          description: the badge numbers of the current group members. READ ONLY, provided for ease of use of the API, but completely ignored in all write requests. Please use the relevant subresource API endpoints to manipulate group membership.
          items:
            type: integer
            description: badge number (id in the attendee service)
          example: [4, 11]
        invites:
          type: array
          description: the badge numbers of any attendees with outstanding invites for this group. READ ONLY, provided for ease of use of the API, but completely ignored in all write requests. Please use the relevant subresource API endpoints to send/revoke invites.
          items:
            type: integer
            description: badge number (id in the attendee service)
          example: [22]
    Error:
      type: object
      required:
        - message
        - timestamp
        - requestid
      properties:
        timestamp:
          type: string
          format: date-time
          description: The time at which the error occurred.
          example: 2006-01-02T15:04:05+07:00
        requestid:
          type: string
          description: An internal trace id assigned to the error. Used to find logs associated with errors across our services. Display to the user as something to communicate to us with inquiries about the error.
          example: a8b7c6d5
        message:
          type: string
          description: |-
            A keyed description of the error. We do not write human readable text here because the user interface will be multi language.
            
            At this time, there are these values:
            - auth.unauthorized (token missing completely or invalid)
            - auth.forbidden (permissions missing)
            - group.read.error (database error)
            - group.parse.error (invalid json)
            - group.data.invalid (invalid field contents)
            - group.data.duplicate (group with same name already exists, cannot create or rename)
            - group.member.duplicate (attendee is already in another group)
          example: group.read.error
        details:
          type: object
          description: Optional additional details about the error. If available, will usually contain English language technobabble.
          additionalProperties:
            type: array
            items:
              type: string
          example:
            other:
              - no such room group 'kerfluffle'
              - you need to refill the flux capacitor before the operation can succeed
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: A bearer or session token obtained from the auth service (which may integrate an OIDC identity provider)
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-Api-Key
      description: A shared secret used for local communication (also useful for local development)
