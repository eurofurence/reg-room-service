openapi: 3.0.3
info:
  title: Room Service
  description: |-
    This backend microservice manages 
    - groups formed by registered attendees
    - rooms
    - room assignments of groups or individual attendees
    - a countdown to reveal a secret for external room booking
    
    USE CASE 1: youth hostel style convention
    
    Room groups as provided by this service are useful if you run your convention in a youth hostel, where the registration
    fee includes a bed in one of the rooms. Because each bed costs the same and is included in the convention fee, 
    Attendees can form groups of their own choice, and a few days before the convention, an admin makes the room assignments.
    
    In this model, attendees form groups after they are approved. Each ticket includes a bed anyway, so the only thing
    being managed is who goes in which room.

    USE CASE 2: hotel room lottery
    
    Rooms can also be used in standalone fashion, only assigning individual attendees. This is
    particularly useful if you run your convention in a hotel, and you want to run a room lottery, where
    you are re-selling a fixed set of rooms of different types.
    
    In this model, the cost of accommodation is not included 
    with the convention fee, but instead the room types are separate packages. In order to conduct the
    lottery, registrations that have selected the same room package need to refer to each other (which is an implicit
    way of forming a group that is not managed by this service). When a room is reserved for them, their
    registration is approved and the room fee is billed along with the registration fee, and they are assigned
    to the room.

    Note that unlike the youth hostel model, the room assignment happens when the attendees in it are approved 
    (or when the room package is later added to their bill),
    so the hotel room is reserved before you bill the attendees for their share of the room price.

    USE CASE 3: countdown to reveal a secret for booking via a third party
    
    There is also a countdown function which can reveal a secret code when the countdown finishes.
    This is useful if room reservations are actually
    managed by a hotel or other third party, which collects the cost directly, and you are not involved in the
    transaction.

    In this model, all attendees get access to the secret code at the same time 
    and can then attempt a reservation in a system run by the third party, or via email or phone, using the secret code.
    
    Note that in this model, room booking is not really tied to a valid registration, you'll need to check the list from
    the third party to find out if someone booked who was then cancelled, for example.
  license:
    name: MIT
    url: https://github.com/eurofurence/reg-room-service/blob/main/LICENSE
  version: 0.1.0
servers:
  - url: /api/rest/v1
    description: localhost
  - url: /roomsrv/api/rest/v1
    description: server
tags:
  - name: groups
    description: Manage Groups
  - name: rooms
    description: Manage Rooms
  - name: countdown
    description: Countdown to secret reveal
paths:
  /groups:
    get:
      tags:
        - groups
      summary: list groups
      description: |-
        Obtain a list of all or selected groups, including their members.       
        
        Admin or Api Key authorization: can see all groups.
        
        Normal users: can only see groups visible to them. If public groups are enabled in configuration,
        this means all groups that are public, not full, and from which the user wasn't banned. Not all fields
        will be filled.
        
        Note: both admins and normal users can always use the findMyGroup operation to get the group they are in.
      operationId: listGroups
      parameters:
        - name: member_ids
          in: query
          description: a comma separated list of badge numbers. The result will be limited to all groups that contain at least one of these badge numbers as members. Only admins can set this parameter, it is ignored for normal attendees to avoid leaking information.
          schema:
            type: string
            example: 4,11,2560
        - name: min_size
          in: query
          description: list only groups that currently have at least this many members (optional, defaults to 0 which means no limitation)
          schema:
            type: integer
            example: 2
        - name: max_size
          in: query
          description: list only groups that currently have at most this many members (optional, defaults to 0 which means no limitation)
          schema:
            type: integer
            example: 4
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupList'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see the list of groups (for example, wrong registration status for normal users)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: You do not have a valid registration, and so cannot see the list of groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '502':
          description: The attendee service failed to respond when asked for the user's registrations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
    post:
      tags:
        - groups
      summary: create a new group
      description: |-
        Create a new group, setting yourself as the owner.
        
        This also adds you as the first member of the group.
        
        You must have a valid registration.
        
        Note that the members and invites fields are ignored. The group is always created with just you as the owner
        (or for admins, if a different owner is specified via badge number, that owner).
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreate'
        required: true
      responses:
        '201':
          description: Successfully created
          headers:
            Location:
              schema:
                type: string
              description: URL of the created resource, ending in the assigned uuid.
        '400':
          description: Invalid input (name too long/missing, etc.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to create a group (not a valid registration? not in valid status for creating a group?)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No such attendee (when setting owner id - admin only).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: duplicate (same group name, or you already are in a group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '502':
          description: The attendee service failed to respond when asked for the user's registrations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
  /groups/my:
    get:
      tags:
        - groups
      summary: find my group
      description: |-
        Obtain the group you are in. Must have a valid registration.
        
        This works even for admins, still gives them the group they are in.
        
        Because the user identity is taken from the logged in user, this does not work for Api Key authorization.
        Use the /groups endpoint with member_id parameter instead.
      operationId: findMyGroup
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see this (maybe not a valid registration? status not attending?)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: You are not in any groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
  /groups/{uuid}:
    get:
      tags:
        - groups
      summary: obtain a group by uuid
      description: Returns a single group. You must be a member of the group or an admin in order to have access.
      operationId: getGroupById
      parameters:
        - name: uuid
          in: path
          description: uuid of the group to return
          required: true
          schema:
            type: string
            example: 604f5ea8-d146-4aac-9a15-4dc33a84eb59
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see this group (e.g. not a member)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
    put:
      tags:
        - groups
      summary: update an existing group
      description: |-
        Update an existing group by uuid. Note that you cannot use this to change the group members!
        
        Admins or the current group owner can change the group owner to any member of the group.
      operationId: updateGroup
      parameters:
        - name: uuid
          in: path
          description: uuid of the group to update
          required: true
          schema:
            type: string
            example: 604f5ea8-d146-4aac-9a15-4dc33a84eb59
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        '204':
          description: Successful operation
          headers:
            Location:
              schema:
                type: string
              description: URL of the resource, ending in the assigned uuid.
        '400':
          description: Invalid uuid supplied or invalid data in request body, or new owner not part of the group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to change this group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: your changes would turn this group into a duplicate (same name as existing other group)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
    delete:
      tags:
        - groups
      summary: disband an existing group
      description: |-
        Disband (and delete) an existing group by uuid. Note that this will first kick everyone from the group!
        
        Admins or the current group owner can do this.
      operationId: deleteGroup
      parameters:
        - name: uuid
          in: path
          description: uuid of the group to disband
          required: true
          schema:
            type: string
            example: 604f5ea8-d146-4aac-9a15-4dc33a84eb59
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid uuid supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to do this (not owner/admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Group still contains members other than the owner. Must remove them first to ensure proper notifications.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
  /groups/{uuid}/members/{badgenumber}:
    post:
      tags:
        - groups
      summary: add or invite a group member
      description: |-
        Adds an attendee to a group, or invites them, or accepts an already existing invitation.
        
        *Limitations*
        
        Only attending attendees can be added to a group or invited to groups.
        
        Attendees cannot be in more than one group. Attendees who are members of any group cannot be invited to any group.

        The moment an attendee becomes a member of any group, any existing invitations for that attendee are discarded.

        For a single group, there can be only one invitation for each attendee.  
        
        The total number of invitations plus members of a group cannot exceed its size. Example: If your
        group has 2 members, and maximum group size is 4, you can invite at most 2 attendees. This is to prevent
        invitation spam.

        If an attendee is already in a group, or has already been individually assigned to a room, then they
        cannot be added to a group any more.
        
        *Admins*
        
        Admins can add the force query parameter to directly add an attendee to a group. This operation
        ignores the group's auto-deny list, and directly adds the attendee as a member of the group. If there
        is an invitation, it is removed.
        
        If an admin does not set the force parameter, they are treated like an ordinary user, and *Case 1* and *Case 2*
        apply.
        
        *Case 1: Owner invites first*
        
        The owner may use this to make an invitation to their group. This will create an invitation, including a code that
        the invited attendee will need to join the group. (Exception: if the invited attendee has declined a previous
        invitation and specified that they do not desire further invitations to this group (see DELETE description),
        the invitation attempt will be auto-denied.)
        
        The attendee then uses this same endpoint (with the code) to accept the invitation, thus becoming a member.
        The attendee can decline an invitation by instead sending DELETE.
        
        *Case 2: Attendee (not owner) requests to join*
        
        If a group has the "public" flag, an attendee can request to join it without an active invitation.
        This will create a self-initiated invitation. (Exception: if the owner has declined a previous such invitation
        and specified that they do not desire further inquiries from this attendee (see DELETE description),
        the inquiry will be auto-denied.) 
        
        When a self-initiated invitation exists, the group owner approves it by using this same endpoint. The
        attendee then becomes a member. The owner can decline by instead sending DELETE.
      operationId: addToGroup
      parameters:
        - name: uuid
          in: path
          description: uuid of the group
          required: true
          schema:
            type: string
            example: 604f5ea8-d146-4aac-9a15-4dc33a84eb59
        - name: badgenumber
          in: path
          description: badge number of the attendee
          required: true
          schema:
            type: integer
            example: 4
        - name: nickname
          in: query
          description: authorize sending an invitation email by proving you know the person's nickname (used for two-step invitation process)
          schema:
            type: string
            example: JumpySquirrel
        - name: code
          in: query
          description: invitation code (used for two-step invitation process)
          schema:
            type: string
            example: 80a4c699
        - name: force
          in: query
          description: directly perform add, do not send invite to user (admin only)
          schema:
            type: string
            default: false
            enum:
              - false
              - true
      responses:
        '204':
          description: successful operation
        '400':
          description: Invalid group id or badge number supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to do this
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee or group not found, or nickname mismatch for sending invitation mails, or authorization code mismatch for joining a group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Duplicate assignment, this attendee is already in another group, or has been individually assigned to a room already.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
    delete:
      tags:
        - groups
      summary: remove a group member or revoke an invitation
      description: |-
        Removes the attendee with the given badge number from the group (or its list of invitations). Possibly
        also add an entry to the group's auto-deny list.

        *Permissions*
        
        Group owners can remove members/revoke invitations.
        
        Members can remove themselves/decline invitations.
        
        Admins can remove anyone/revoke their invitations.

        *Limitations*
        
        If a member is the current group owner, this fails with 409 conflict. First must reassign the group owner via 
        an update to the group resource.
        
        *Auto-Deny*
        
        If the autodeny parameter is set to true, in addition to removing the group membership/invitation, the
        badgenumber is added to an auto-decline list. Further attempts to invite this attendee into the group
        are automatically declined.
      operationId: removeFromGroup
      parameters:
        - name: uuid
          in: path
          description: uuid of the group
          required: true
          schema:
            type: string
            example: 604f5ea8-d146-4aac-9a15-4dc33a84eb59
        - name: badgenumber
          in: path
          description: badge number of the attendee
          required: true
          schema:
            type: integer
            example: 4
        - name: autodeny
          in: query
          description: autodeny future invitations
          required: false
          schema:
            type: boolean
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid group id or badge number supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to do this
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee or group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict, this attendee is currently the owner of the group. Either change the owner first, or disband (delete) the group completely.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
  /rooms:
    get:
      tags:
        - rooms
      summary: list rooms
      description: |-
        Obtain a list of all rooms, including their members.       
        
        Admin or Api Key authorization only.
      operationId: listRooms
      parameters:
        - name: member_ids
          in: query
          description: a comma separated list of badge numbers. The result will be limited to all rooms that contain at least one of these badge numbers as members (both individually or as part of an assigned group).
          schema:
            type: string
            example: 4,11,2560
        - name: min_size
          in: query
          description: list only rooms that have at least this many beds (optional, defaults to 0 which means no limitation)
          schema:
            type: integer
            example: 2
        - name: max_size
          in: query
          description: list only rooms that have at most this many beds (optional, defaults to 0 which means no limitation)
          schema:
            type: integer
            example: 4
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomList'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see the list of rooms (admin/api key only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
    post:
      tags:
        - rooms
      summary: create a new room
      description: |-
        Create a new room.
        
        Does not assign anyone to it.
        
        Admin only.
      operationId: createRoom
      requestBody:
        description: Create a new room
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
        required: true
      responses:
        '201':
          description: Successfully created
          headers:
            Location:
              schema:
                type: string
              description: URL of the created resource, ending in the assigned uuid.
        '400':
          description: Invalid input (name too long/missing, etc.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to create a room (Admin/Api Key only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: duplicate (same room name)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
  /rooms/my:
    get:
      tags:
        - rooms
      summary: find my room
      description: |-
        Obtain the room you are in. Must have a valid registration.
        
        Visibility of this information depends on the "final" flag that is set on the room, so admins can start planning
        room assignments without them becoming immediately visible to users.
        
        This endpoint works even for admins, giving them the room they are in.
        
        Because the user identity is taken from the logged in user, this does not work for Api Key authorization.
        Use the /rooms endpoint with member_id parameter instead.
      operationId: findMyRoom
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see your room (maybe not an active registration?)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: You are not in any rooms (that are visible to you). Note that this may happen even if the attendee actually is in a room, but the room isn't flagged as "final".
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
  /rooms/{uuid}:
    get:
      tags:
        - rooms
      summary: obtain a room by uuid
      description: Returns a single room
      operationId: getRoomById
      parameters:
        - name: uuid
          in: path
          description: uuid of the room to return
          required: true
          schema:
            type: string
            example: 604f5ea8-d146-4aac-9a15-4dc33a84eb59
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see this room (e.g. not a member/admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
    put:
      tags:
        - rooms
      summary: update an existing room
      description: |-
        Update an existing room by uuid. Note that you cannot use this to change the room members!
        
        Admin/Api Key only.
      operationId: updateRoom
      parameters:
        - name: uuid
          in: path
          description: uuid of the room to update
          required: true
          schema:
            type: string
            example: 604f5ea8-d146-4aac-9a15-4dc33a84eb59
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
        required: true
      responses:
        '200':
          description: Successful operation
          headers:
            Location:
              schema:
                type: string
              description: URL of the resource, ending in the assigned uuid.
        '400':
          description: Invalid uuid supplied or invalid data in request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to change this room (admin only)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: your changes would turn this room into a duplicate (same name as existing other room)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
    delete:
      tags:
        - rooms
      summary: delete an existing empty room
      description: |-
        Delete an existing room by uuid.
        
        IMPORTANT: once an attendee has been billed for this room, this is a dangerous operation, as it may
        deprive them of a room reservation that you have confirmed! For this reason, you can only
        delete empty rooms.

        Admin only.
      operationId: deleteRoom
      parameters:
        - name: uuid
          in: path
          description: uuid of the group to disband
          required: true
          schema:
            type: string
            example: 604f5ea8-d146-4aac-9a15-4dc33a84eb59
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid uuid supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to do this (not admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: The room isn't empty. Please remove everyone first.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
  /rooms/{uuid}/individuals/{badgenumber}:
    post:
      tags:
        - rooms
      summary: add an attendee who is not in any groups
      description: |-
        Adds an attendee to a room as an individual.
        
        The attendee must not be member of a group.
        
        Admin only.
      operationId: addToRoom
      parameters:
        - name: uuid
          in: path
          description: uuid of the group
          required: true
          schema:
            type: string
            example: 604f5ea8-d146-4aac-9a15-4dc33a84eb59
        - name: badgenumber
          in: path
          description: badge number of the attendee
          required: true
          schema:
            type: integer
            example: 4
      responses:
        '204':
          description: successful operation
        '400':
          description: Invalid room id or badge number supplied, or room is full
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to do this
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee or room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Duplicate assignment, this attendee is already in another room, or is in a group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
    delete:
      tags:
        - rooms
      summary: remove an attendee who is not in any group
      description: |-
        Removes the attendee with the given badge number from the room as an individual.
        
        You cannot change groups this way.
        
        Admin only.
      operationId: removeFromRoom
      parameters:
        - name: uuid
          in: path
          description: uuid of the group
          required: true
          schema:
            type: string
            example: 604f5ea8-d146-4aac-9a15-4dc33a84eb59
        - name: badgenumber
          in: path
          description: badge number of the attendee
          required: true
          schema:
            type: integer
            example: 4
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid room id or badge number supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to do this
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Room not found, attendee not found or not a member of the room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
  /rooms/{uuid}/groups/{groupid}:
    post:
      tags:
        - rooms
      summary: add a whole group
      description: |-
        Adds a group to a room.
        
        This locks the group against membership changes done by regular attendees. Admins may still change group membership.
        
        Admin only.
      operationId: addGroupToRoom
      parameters:
        - name: uuid
          in: path
          description: uuid of the room
          required: true
          schema:
            type: string
            example: 604f5ea8-d146-4aac-9a15-4dc33a84eb59
        - name: groupid
          in: path
          description: uuid of the group
          required: true
          schema:
            type: string
            example: 80805ea8-d146-4aac-9a15-4dc33a84eb59
      responses:
        '204':
          description: successful operation
        '400':
          description: Invalid room or group id supplied, or room too small for group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to do this
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Room or group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Duplicate assignment, this group is already assigned to another room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
    delete:
      tags:
        - rooms
      summary: remove a whole group
      description: |-
        Removes the group from the room.
        
        Admin only.
      operationId: removeGroupFromRoom
      parameters:
        - name: uuid
          in: path
          description: uuid of the group
          required: true
          schema:
            type: string
            example: 604f5ea8-d146-4aac-9a15-4dc33a84eb59
        - name: groupid
          in: path
          description: uuid of the group
          required: true
          schema:
            type: string
            example: 80805ea8-d146-4aac-9a15-4dc33a84eb59
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid room or group id supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to do this
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Room or group not found, or group not in room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
  /countdown:
    get:
      tags:
        - countdown
      summary: external room booking launch information
      description: |-
        Returns the countdown information. If the countdown has reached 0, also reveals the configured secret.
        
        You need to be logged in.
      operationId: countdown
      parameters:
        - name: currentTimeIso
          in: query
          description: Testing override for the current time. Used in end to end tests for the frontend. Not useful in production because you will also not get the real secret.
          schema:
            type: string
            format: date-time
            example: 2006-01-02T15:04:05-07:00
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Countdown'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
components:
  schemas:
    Countdown:
      type: object
      required:
        - currentTime
        - targetTime
        - countdown
      properties:
        currentTime:
          type: string
          format: date-time
          description: The current time on the server
          example: 2006-01-02T15:04:05+07:00
        targetTime:
          type: string
          format: date-time
          description: The time at which the countdown ends (may depend on authorization, e.g. staff may register earlier than normal users)
          example: 2006-01-02T15:04:05+07:00
        countdown:
          type: integer
          format: int64
          description: The number of seconds until the countdown ends (may depend on authorization, e.g. staff may register earlier than normal users). Stays at 0 if the countdown is over.
          example: 12648
        secret:
          type: string
          description: The secret code word you'll need to give the hotel (may depend on authorization, e.g. staff gets a different code word that allows earlier room booking). Will be missing before your countdown has reached 0.
    GroupList:
      type: object
      required:
        - groups
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
    Group:
      type: object
      required:
        - id
        - name
        - owner
      properties:
        id:
          type: string
          description: The internal primary key of the group, in the form of a UUID. Only set when reading groups, completely ignored when you send a group to us.
          example: 604f5ea8-d146-4aac-9a15-4dc33a84eb59
        name:
          type: string
          description: The name of the group, must be unique, but otherwise just used for display purposes
          example: Kittens
          maxLength: 80
          minLength: 1
        flags:
          type: array
          items:
            type: string
          description: A list of flags as declared in configuration. Flags are used to store yes/no-style information about the group such as "wheelchair", etc.
          example:
            - privacy
            - wheelchair
        comments:
          type: string
          description: Optional comments the owner wishes to make regarding the group. Not processed in any way.
          example: A personal reason for the privacy request
        maximum_size:
          type: integer
          minimum: 0
          description: if set higher than 0 (the default), will limit the number of people that can join the group. Note that there is also a configuration item that globally limits the size of groups, e.g. to the maximum room size.
          example: 6
        owner:
          type: integer
          description: the badge number of the group owner. Must be a member of the group. If you are not an admin, you can only create groups with yourself as owner.
        members:
          type: array
          description: the current group members. READ ONLY, provided for ease of use of the API, but completely ignored in all write requests. Please use the relevant subresource API endpoints to manipulate group membership.
          items:
            $ref: '#/components/schemas/Member'
        invites:
          type: array
          description: the current outstanding invites for this group. READ ONLY, provided for ease of use of the API, but completely ignored in all write requests. Please use the relevant subresource API endpoints to send/revoke invites.
          items:
            $ref: '#/components/schemas/Member'
    GroupCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the group, must be unique, but otherwise just used for display purposes
          example: Kittens
          maxLength: 80
          minLength: 1
        flags:
          type: array
          items:
            type: string
          description: A list of flags as declared in configuration. Flags are used to store yes/no-style information about the group such as "wheelchair", etc.
          example:
            - public
            - wheelchair
        comments:
          type: string
          description: Optional comments the owner wishes to make regarding the group. Not processed in any way.
          example: A personal reason for the privacy request
    RoomList:
      type: object
      required:
        - rooms
      properties:
        rooms:
          type: array
          items:
            $ref: '#/components/schemas/Room'
    Room:
      type: object
      required:
        - name
        - size
      properties:
        id:
          type: string
          description: The internal primary key of the room, in the form of a UUID. Only set when reading rooms, completely ignored when you send a room to us.
          example: 604f5ea8-d146-4aac-9a15-4dc33a84eb59
        name:
          type: string
          description: The name of the room, must be unique, but otherwise just used for display purposes
          example: 'Lug ins Land'
          maxLength: 80
          minLength: 1
        flags:
          type: array
          items:
            type: string
          description: A list of flags as declared in configuration. Flags are used to store yes/no-style information about the room.
          example:
            - wheelchair
            - final
        comments:
          type: string
          description: Optional comment. Not processed in any way.
          example: You can see the whole world from up here.
        size:
          type: integer
          minimum: 1
          description: the maximum room size, usually the number of sleeping spots/beds in the room.
          example: 6
        members:
          type: array
          description: the assigned room members. READ ONLY, provided for ease of use of the API, but completely ignored in all write requests. Please use the relevant subresource API endpoints to manipulate individual or group assignments.
          items:
            $ref: '#/components/schemas/Member'
    Member:
      type: object
      required:
        - id
        - nickname
        - hasKey
      properties:
        id:
          type: integer
          description: badge number (id in the attendee service).
          example: 42
        nickname:
          type: string
          description: The nickname of the attendee, proxied from that attendee service.
          example: Jumpy
        avatar:
          type: string
          description: A url to obtain the avatar for this attendee, points to an image such as a png or jpg. May require the same authentication this API expects.
          example: 'http://example.com/some/avatar.png'
        hasKey:
          type: boolean
          default: false
          description: Set to true if this person has been given a key to the room, for groups this can only be set if already assigned a room.
    Error:
      type: object
      required:
        - message
        - timestamp
        - requestid
      properties:
        timestamp:
          type: string
          format: date-time
          description: The time at which the error occurred.
          example: 2006-01-02T15:04:05+07:00
        requestid:
          type: string
          description: An internal trace id assigned to the error. Used to find logs associated with errors across our services. Display to the user as something to communicate to us with inquiries about the error.
          example: a8b7c6d5
        message:
          type: string
          description: |-
            A keyed description of the error. We do not write human readable text here because the user interface will be multi language.
            
            At this time, there are these values:
            - auth.forbidden (permissions missing or not a registered attendee)
            - auth.unauthorized (token missing completely or invalid)
            - group.data.duplicate (group with same name already exists, cannot create or rename)
            - group.data.invalid (invalid field contents)
            - group.id.invalid (invalid uuid id format)
            - group.id.notfound (no such group id)
            - group.invite.mismatch (nickname did not match - invite not sent)
            - group.mail.error (mail service reported error when sending notification)
            - group.member.duplicate (attendee is already in another group or has been assigned to a room already)
            - group.member.notfound (attendee is not in any group, or attendee not found when trying to add)
            - group.owner.notfound (requested owner is not part of this group)
            - group.owner.cannot.remove (this attendee is currently the owner of the group. Either change the owner first, or disband the group completely)
            - group.parse.error (invalid json)
            - group.read.error (database error)
            - group.write.error (database error)
            - room.data.duplicate (room with same name already exists, cannot create or rename)
            - room.data.invalid (invalid field contents)
            - room.group.duplicate (group is already assigned to another room)
            - room.group.notfound (group is not in this room, or group not found when trying to add/remove)
            - room.id.invalid (invalid uuid id format)
            - room.id.notfound (no such room id)
            - room.member.duplicate (attendee is already in another room)
            - room.member.in.group (attendee is in a group, cannot assign individually - assign the whole group or remove from group)
            - room.member.notfound (attendee is not in any/this room, or attendee not found when trying to add/remove)
            - room.not.empty (cannot delete a room that isn't empty)            
            - room.parse.error (invalid json)
            - room.read.error (database error)
            - room.too.small (not enough space in room to add individual or group)
            - room.write.error (database error)
          example: group.read.error
        details:
          type: object
          description: Optional additional details about the error. If available, will usually contain English language technobabble.
          additionalProperties:
            type: array
            items:
              type: string
          example:
            other:
              - no such group 'kerfluffle'
              - you need to refill the flux capacitor before the operation can succeed
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: A bearer or session token obtained from the auth service (which may integrate an OIDC identity provider)
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-Api-Key
      description: A shared secret used for local communication (also useful for local development)
